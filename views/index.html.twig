{% extends 'base.html.twig' %}

{% block title %}Home{% endblock %}

{% block style %}
    <style>
            @import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);
        *,
        *:before,
        *:after {
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }

        input:focus,
        select:focus,
        textarea:focus,
        button:focus {
            outline: none;
        }

        .wrapper {
            width: 100%;
            min-height: 250px;
            height: auto;
        }

        .drop {
            width: 96%;
            height: 96%;
            border: 3px dashed #ff550b;
            background-color: #121212;
            border-radius: 15px;
            text-align: center;
            -webkit-transition: all 0.5s ease-out;
            -moz-transition: all 0.5s ease-out;
            transition: all 0.5s ease-out;
            margin: auto;
        }
        .drop .cont {
            -webkit-transition: all 0.5s ease-out;
            -moz-transition: all 0.5s ease-out;
            transition: all 0.5s ease-out;
            margin: auto;
        }
        .drop .cont > i {
            font-size: 200%;
            position: relative;
        }
        .drop .cont .tit {
            font-size: 200%;
            text-transform: uppercase;
        }

        .drop input {
            width: 100%;
            height: 100%;
            cursor: pointer;
            background: red;
            opacity: 0;
            margin: auto;
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
        }

        .fileDiv i {
            line-height: 1.5;
        }
        .fileDiv .size {
            font-size: 80%;
        }
        .hidden {
            display: none;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="row index">
        <div class="col-12">
            <div class="wrapper">
                <div class="drop row">
                    <div class="cont col-12 col-md-7 col-lg-5">
                        <i class="fa fa-cloud-upload-alt mt-2"></i>
                        <div class="tit">
                            Drag & Drop
                        </div>
                        <div class="desc">
                            le dossier, ou
                        </div>
                        <div class="browse btn btn-primary py-1 px-5 my-3">
                            cliquez pour importer
                        </div>

                    </div>
                    <output id="listFile" class="col-12 col-md-5 col-lg-7 hidden">
                        <div class="row"></div>
                    </output>
                    <input type="file" id="msgFolder" webkitdirectory directory name="files"/>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="row">
                <p class="col-12 display-4">En cours :</p>
                <p class="col-12 display-4 font-weight-bold text-center" id="currentMsgName">-</p>
            </div>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            total messages : <span class="text-primary" id="totMsg"></span>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            La convertaion dure depuis : <span class="text-primary" id="convSpan"></span>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            my msg : <span class="text-primary" id="myMsg"></span>
        </div>
    </div>
{% endblock %}

{% block script %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
    <script>
        let messagesList = [],
            participantList = [],
            startYear,
            startMonth,
            startDay,
            endYear,
            endMonth,
            endDay,
            basedOnToday = 1
        // Import data from Json

        //util function
        $(() => {

        })
        format = function date2str(x, y) {
            var z = {
                M: x.getMonth() + 1,
                d: x.getDate(),
                h: x.getHours(),
                m: x.getMinutes(),
                s: x.getSeconds()
            };
            y = y.replace(/(M+|d+|h+|m+|s+)/g, function(v) {
                return ((v.length > 1 ? "0" : "") + eval('z.' + v.slice(-1))).slice(-2)
            });

            return y.replace(/(y+)/g, function(v) {
                return x.getFullYear().toString().slice(-v.length)
            });
        }
        function sort_object(obj) {
            items = Object.keys(obj).map(function(key) {
                return [key, obj[key]];
            });
            items.sort(function(first, second) {
                return second[1] - first[1];
            });
            sorted_obj={}
            $.each(items, function(k, v) {
                use_key = v[0]
                use_value = v[1]
                sorted_obj[use_key] = use_value
            })
            return(sorted_obj)
        }
        function generateGlobal() {
            startYear = new Date(messagesList[0].timestamp_ms).getFullYear()
            startMonth = new Date(messagesList[0].timestamp_ms).getMonth()
            startDay = new Date(messagesList[0].timestamp_ms).getDay()
            if (basedOnToday === 1) {
                endYear = new Date().getFullYear()
                endMonth = new Date().getMonth()
                endDay = new  Date().getDate()
            } else {
                startYear = new Date(messagesList[messagesList.length-1].timestamp_ms).getFullYear()
                startMonth = new Date(messagesList[messagesList.length-1].timestamp_ms).getMonth()
                startDay = new Date(messagesList[messagesList.length-1].timestamp_ms).getDay()
            }
        }

        // Create the display for imported json file
        function createFileDiv(fileName, fileSize){

            $('#listFile').removeClass('hidden')

            let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']
            if (fileSize === 0)
                fileSize = '0 Byte'
            let j = parseInt(Math.floor(Math.log(fileSize) / Math.log(1024)))
            fileSize = Math.round(fileSize / Math.pow(1024, j), 2) + ' ' + sizes[j]

            $('#listFile>.row').append(
                $('<div></div>').addClass('col-12 col-lg-6 fileDiv').append(
                    $('<div></div>').addClass('row border border-secondary rounded my-1').append(
                        $('<div></div>').addClass('col-6 text-left font-weight-bold').text(fileName),
                        $('<div></div>').addClass('col-4 text-left size align-middle').text(fileSize),
                        $('<div></div>').addClass('col-2').append(
                            $('<i></i>').addClass('fas fa-cog fa-spin ' + fileName)
                        )
                    )
                )
            )
        }
        function deleteAllFileDiv(){
            $('.fileDiv').remove()
            $("#listFile").addClass('hidden')
        }

        // loading process from imported folder
        let folder = $('#msgFolder')[0]
        $(folder).on('change', () => {
            let files = []
            messagesList = []
            for (file of folder.files) {
                if (RegExp('message_[0-9]+.json').test(file.name))
                    files.push(file)
            }

            //2 level of Promise :
            //   the inner one is for json reading process to complet
            //   the surronding one is here to wait until the inner one start initializing Promise (else the Promise.all will evalute an empty array)
            deleteAllFileDiv()
            let promiseDecod = [],
                promisePromise = []
            for (file of files) {
                promisePromise.push(new Promise( (resolvePromise) => {
                    let fileName = file.name.split('.')[0]
                    createFileDiv(fileName, file.size)

                    // data generator
                    let reader = new FileReader()
                    reader.onload = ((theFile) => {
                        return function (e) {
                            promiseDecod.push(new Promise((resolveDecod) => {
                                try {
                                    json = JSON.parse(decodeURIComponent(escape(JSON.stringify(JSON.parse(e.target.result)))))
                                } catch (ex) {
                                    alert('ex when trying to parse json = ' + ex)
                                }
                                messagesList = messagesList.concat(json.messages)
                                $('.' + fileName).removeClass('fa-cog').removeClass('fa-spin').addClass('fa-check').addClass('text-primary')
                                $('#currentMsgName').text(json.title)
                                resolveDecod()
                            }))
                            resolvePromise()
                        }
                    })(file)
                    reader.readAsText(file)
                }))
            }

            Promise.all(promisePromise).then(() => {
                Promise.all(promiseDecod).then(() => {
                    messagesList.sort((a, b) => (a.timestamp_ms > b.timestamp_ms) ? 1 : -1)
                    getParticipant()
                    $('#totMsg').text(getTotalMsg())
                    $('#convSpan').text(getSpanOfConversation())
                    console.log(getMessagesPerMonth())
                    console.log(getMessagesPerMonthPerParticipant())
                    $('#myMsg').text(getTotalMessagesPerParticipant()['Colin Cqno'])
                })
            })
        })
        // end of import process

        // data process function
        function getParticipant() {
            for (m of messagesList) {
                if(!participantList.includes(m.sender_name))
                    participantList.push(m.sender_name)
            }
            return participantList
        }

        function getTotalMsg(){
            return messagesList.length
        }

        function getSpanOfConversation(){
            tmpDate = messagesList[messagesList.length-1].timestamp_ms - messagesList[0].timestamp_ms
            return Math.ceil(tmpDate / (1000 * 60 * 60 * 24)) + " jours"
        }

        function getTotalMessagesPerParticipant(){
            let ret = {}
            for(p of participantList){
                ret[p] = 0
            }
            for (m of messagesList){
                ret[m.sender_name] ++
            }
            return ret
        }

        function getMessagesPerMonth() {
            let ret = {}

            for (i = startYear;i<=endYear;i++){
                switch (i) {
                    case startYear:
                        for (j=startMonth;j<12;j++){
                            ret[i+' '+j] = 0
                        }
                        break
                    case endYear:
                        for (j=0;j<=endMonth;j++){
                            ret[i+' '+j] = 0
                        }
                        break
                    default:
                        for (j=0;j<12;j++){
                            ret[i+' '+j] = 0
                        }
                        break
                }
            }
            for (m of messagesList) {
                ret[new Date(m.timestamp_ms).getFullYear()+' '+new Date(m.timestamp_ms).getMonth()] ++
            }
            return ret
        }

        function getMonthWithMostMsg(msgPerMonth) {
            return Object.keys(msgPerMonth).reduce((a, b) => msgPerMonth[a] > msgPerMonth[b] ? a : b)
        }

        function getMessagesPerMonthPerParticipant() {
            let startYear = new Date(messagesList[0].timestamp_ms).getFullYear(),
                startMonth = new Date(messagesList[0].timestamp_ms).getMonth(),
                endYear = new Date().getFullYear(),
                endMonth = new Date().getMonth(),
                ret = {}

            function createLine(i,j) {
                ret[i+' '+j] = {}
                for (p of participantList) {
                    ret[i+' '+j][p] = 0
                }
            }

            for (i = startYear;i<=endYear;i++){
                switch (i) {
                    case startYear:
                        for (j=startMonth;j<12;j++){
                            createLine(i,j)
                        }
                        break
                    case endYear:
                        for (j=0;j<=endMonth;j++){
                            createLine(i,j)
                        }
                        break
                    default:
                        for (j=0;j<12;j++){
                            createLine(i,j)
                        }
                        break
                }
            }
            for (m of messagesList) {
                ret[new Date(m.timestamp_ms).getFullYear()+' '+new Date(m.timestamp_ms).getMonth()][m.sender_name] ++
            }
            return ret
        }
        
        function getMsgPerDay(word) {

        }
        
    </script>
{% endblock %}